Todas as instruções devem ser executadas dentro do diretorio do
aplicativo bdd_teste_app. Utilize os comandos de navegação do terminal
do Linux para visualizar pastas, estruturas e fazer as edições
necessárias nos testes.  Visualize a estrutura do projeto no explorer
ou no git em caso de dúvida.

Há 2 formas de rodar os testes:
    1 - Caso você desejar rodar todos os testes, utilize apenas o comando cucumber
    2 - Caso você desejar rodar algum teste em específico, utilize o comando cucumber seguido do local do arquivo.

Toda vez que você rodar o comando cucumber, ele pode informar 3 coisas:
    1 - A quantidade de testes que passou (em linhas verdes)
    2 - A quantidade de testes que falhou (em linhas vermelhas) e a explicação da falha
    3 - A quantidade de testes que faltam.

A cada novo teste construído, e sempre que quiser, você pode visualizar o aplicativo do teste usando o comando:

```
rails server -b 0.0.0.0
```
e acessar o site em 127.0.0.1:3000

para encerrar a instância do servidor use, no terminal, o comando:

```
CTRL + C
```
/*********************************/

Ambiente da Demonstração:

Desejo criar uma pequena plataforma onde consiga realizar login e submeter qualquer comentário.
Desejo visualizar na tela de inicio ícones com links que me redirecione para as telas de: home, contato e ajuda.


/*********************************/


Demonstração:


1.Preparação das Features:
    1.1 - Crie os arquivos buttons.feature, navegate_contacts.feature e
        welcome.feature dentro da pasta features
    
    1.2 - Preencha o welcome.feature com as informações abaixo:
    
    Feature: Greeting a Guest
    As a enterprise
    In order to receive a new guest in my platform
    I want to have a greeting page to receive him


    Scenario:
        When I am in the home page
        Given I want to see "Welcome to the Sample App"
        
    1.3 - Preencha o buttons.feature com as informações abaixo:
    
    Feature: Navegate Options
    As a enterprise
    In order to let my guests navegate in the platform
    I want to have links to navegate on page


    Scenario:
        Given I am in homepage
        Then I want to see link "Home"
        And I want to see link "Help"
        And I want to see link "Contact"
        
    1.4 - Preencha o navegate_contacts.feature com as informações abaixo:
    
    Feature: Navegate page
    As a user
    I want to navegate in the pages
    So I want to go to page when I click the link
    
    Scenario: Users can se contacts
      When I am in homepage
      And I follow "Contact"
      Then I should see contact informations
      
    /**** Estes vão ser alguns testes de comportamento simples ****/]
    /**** Se você rodar o comando cucumber (ou cucumber features/arquivo.feature) ****/
    /**** irá ver os step_definitions que estão faltando realizar (nesse momento, TODOS)****/
    
    
2.Após criar as features, criamos os step_definitions:


    2.1 - Crie os arquivos buttons_step.rb, navegate_contacts_step.rb e
        welcome_step.rb dentro da pasta features/step_definitions
        
    2.2 - Preencha o welcome_step.rb com as informações abaixo:
        When(/^I am in homepage$/) do
            visit(root_path)
        end
        Given(/^I want to see "([^"]*)"$/) do |arg1|
            page.has_content?(arg1)
        end
    
    2.3 - Preencha o buttons_step.rb com as informações abaixo:
    
        Then(/^I want to see link "([^"]*)"$/) do |arg1|
            assert find_link(arg1).visible?
        end
    
    2.4 - Preencha o navegate_contacts_step.rb com as informações abaixo:
    
        When(/^I follow "([^"]*)"$/) do |arg1|
          click_link(arg1)
          visit(contact_path)
        end


        Then(/^I should see contact informations$/) do
          assert_current_path(contact_path)
          have_content("Contato")
        end
        
    /**** Estes vão ser alguns testes de comportamento simples ****/]
    /**** Se você rodar o comando cucumber (ou cucumber features/arquivo.feature) ****/
    /**** irá ver os step_definitions que FALHARAM (nesse momento, TODOS)****/
    


3. A partir de agora, deverá criar os arquivos para passar nos step_definitions:


    3.1 - Primeiro, temos que ajustar a configuração das rotas. Vá no arquivo config/routes.rb
        e adicione o conteudo abaixo:
        
        Rails.application.routes.draw do
        root 'static_pages#home'
          get  '/help',    to: 'static_pages#help'
          get  '/about',   to: 'static_pages#about'
          get  '/contact', to: 'static_pages#contact'
          get  '/signup',  to: 'users#new'
        end
    
    3.2 - Após isso, você vai criar alguns arquivos para fazer a navegação. Vá para pasta
        app/
        
        3.2.1 - Na pasta controllers, crie o arquivo static_pages_controller.rb:
        
            class StaticPagesController < ApplicationController
              def home
              end
              def about
              end
              def help
              end
              def contact
              end
            end
        
            /**** Quando clicamos no link, esse arquivo vai verificar qual ação tomada ****/
            /**** e vai passar para qual rota deverá chamar o arquivo ****/
    
    3.3 - Na pasta views, crie uma pasta com o nome static_pages e dentro dela:
    
        3.3.1 - Crie um arquivo com o nome about.html.erb e preencha ele com:
        
            <% provide(:title, "About") %>
            <h1>About</h1>
            <p>
              The <a href="http://www.railstutorial.org/"><em>Ruby on Rails
              Tutorial</em></a> is a
              <a href="http://www.railstutorial.org/book">book</a> and
              <a href="http://screencasts.railstutorial.org/">screencast series</a>
              to teach web development with
              <a href="http://rubyonrails.org/">Ruby on Rails</a>.
              This is the sample application for the tutorial.
            </p>
            
        3.3.2 - Crie um arquivo com o nome contact.html.erb e preencha ele com:
            
            <% provide(:title, "Contact") %>


        3.3.3 - Crie um arquivo com o nome help.html.erb e preencha ele com:
            
            <% provide(:title, "Help") %>
            <h1>Help</h1>
            <p>
              Get help on the Ruby on Rails Tutorial at the
              <a href="http://www.railstutorial.org/help">Rails Tutorial help page</a>.
              To get help on this sample app, see the
              <a href="http://www.railstutorial.org/book"><em>Ruby on Rails Tutorial</em>
              book</a>.
            </p>


        3.3.4 - Crie um arquivo com o nome home.html.erb e preencha ele com:


            <% provide(:title, "Home") %>
            <div class="center jumbotron">
              <h1>Welcome to the Sample App</h1>


              <h2>
                This is the home page for the
                <a href="http://www.railstutorial.org/">Ruby on Rails Tutorial</a>
                sample application.
              </h2>


              <%= link_to "Sign up now!", '#', class: "btn btn-lg btn-primary" %>
            </div>


            <%= link_to image_tag("rails.png", alt: "Rails logo"),
                        'http://rubyonrails.org/' %>
    
            /**** Se você rodar o cucumber, alguns passos deverão ter completados ****/
            /**** para completar o resto, utilize os arquivos abaixo ****/
    
    3.4 - Na pasta views/layouts
    
        3.4.1 - Crie o arquivo _footer.html.erb e adicione o conteudo abaixo:
        
            <footer class="footer">
              <small>
                The <a href="http://www.railstutorial.org/">Ruby on Rails Tutorial</a>
                by <a href="http://www.michaelhartl.com/">Michael Hartl</a>
              </small>
              <nav>
                <ul>
                  <li><%= link_to "About",   about_path %></li>
                  <li><%= link_to "Contact", contact_path %></li>
                  <li><a href="http://news.railstutorial.org/">News</a></li>
                </ul>
              </nav>
            </footer>
            
        3.4.2 - Crie o arquivo _header.html.erb e adicione o conteudo abaixo:
        
            <header class="navbar navbar-fixed-top navbar-inverse">
              <div class="container">
                <%= link_to "sample app", root_path, id: "logo" %>
                <nav>
                  <ul class="nav navbar-nav navbar-right">
                    <li><%= link_to "Home",    root_path %></li>
                    <li><%= link_to "Help",    help_path %></li>
                    <li><%= link_to "About",    about_path %></li>
                    <li><%= link_to "Contact",    contact_path %></li>
                    <li><%= link_to "Log in", '#' %></li>
                  </ul>
                </nav>
              </div>
            </header>
            
        3.4.3 - Crie o arquivo application.html.erb e adicione o conteudo abaixo:
        
            <!DOCTYPE html>
            <html>
              <head>
                <title><%= full_title(yield(:title)) %></title>
                <%= csrf_meta_tags %>
                <%= stylesheet_link_tag    'application', media: 'all',
                                                          'data-turbolinks-track': 'reload' %>
                <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
               
              </head>
              <body>
                <%= render 'layouts/header' %>
                <div class="container">
                  <%= yield %>
                </div>
                    <%= debug(params) if Rails.env.development? %>
              </body>
            </html>


        3.4.4 - Crie o arquivo mailer.html.erb e adicione o conteudo abaixo:
        
            <!DOCTYPE html>
            <html>
              <head>
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
                <style>
                  /* Email styles need to be inline */
                </style>
              </head>


              <body>
                <%= yield %>
              </body>
            </html>
        
        3.4.5 - Crie o arquivo mailer.text.erb e adicione o conteudo abaixo:
            <%= yield %>
            


        /**** A partir de agora, ao executar o cucumber, todos os testes vão rodar ****/
        
        /**** O passo 3.4 adicionou arquivos que tinham os links de navegação ****/
        /**** que foram requisitados no buttons_step.rb, principalmente no arquivo ****/
        /**** _header.html.erb e também no navegate_contacts_step que tinha o teste ****/
        /**** de navegação para a barra contatos ****/
        
        /**** poderiamos ter adicionado outros testes de navegação para as outras abas ****/
        /**** no entanto, fica bem parecido com o exempo que colocamos. ****/
        
        /**** O cucumber / capybara não é só isso, você pode utilizar outras ****/
        /**** funcionalidades para testar comportamentos através do link ****/
        /**** https://gist.github.com/zhengjia/428105 ****/
        /**** basta apenas saber o que quer testar ****/
		
